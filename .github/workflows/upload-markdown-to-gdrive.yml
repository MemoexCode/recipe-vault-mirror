name: Upload Snapshot to Google Drive (Validated)

on:
  workflow_dispatch:

jobs:
  snapshot:
    runs-on: ubuntu-latest
    env:
      # Optional: Lege die Zielordner-ID als Secret ab (Shared Drive/Ordner).
      # Lass es leer, wenn du zunächst nur den Zugang testen willst.
      GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: 🧩 Create FULL Markdown Snapshot
        run: |
          SNAPSHOT="recipe-vault_FULLCODE_$(date '+%Y-%m-%d_%H-%M-%S').md"
          echo "# Snapshot $(date -Iseconds)" > "$SNAPSHOT"
          echo "" >> "$SNAPSHOT"
          echo "Commit: $(git log -1 --format=%H)" >> "$SNAPSHOT"
          echo "SNAPSHOT=$SNAPSHOT" >> $GITHUB_ENV

      - name: 🔐 Decode Base64 Google Service Key
        run: |
          echo "${{ secrets.GDRIVE_SERVICE_KEY }}" | base64 --decode > /tmp/sa.json || {
            echo "::error::Base64 decode failed. Ensure the secret is the BASE64 of the FULL JSON."
            exit 1
          }
          # Damit alle gcloud / ADC-Aufrufe exakt diese Creds nutzen:
          echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/sa.json" >> $GITHUB_ENV

      - name: ✅ Validate JSON Syntax
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          jq empty /tmp/sa.json || { echo "::error::Invalid JSON in decoded service key"; exit 1; }
          echo "✅ JSON OK"

      - name: 🔑 Install gcloud & authenticate service account
        run: |
          sudo apt-get install -y google-cloud-cli jq curl
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/sa.json
          gcloud auth activate-service-account --key-file=/tmp/sa.json

          # Quota-Projekt für ADC setzen, damit Tokens ausgestellt werden
          PROJECT_ID=$(jq -r '.project_id' /tmp/sa.json)
          if [ -n "$PROJECT_ID" ] && [ "$PROJECT_ID" != "null" ]; then
            gcloud auth application-default set-quota-project "$PROJECT_ID"
          fi

      - name: 🔎 Check Google Drive access (scoped token)
        run: |
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/sa.json
          SCOPES="https://www.googleapis.com/auth/drive.file,https://www.googleapis.com/auth/drive.metadata.readonly,https://www.googleapis.com/auth/userinfo.email"
          ACCESS_TOKEN=$(gcloud auth application-default print-access-token --scopes="$SCOPES") || {
            echo "::error::Failed to mint access token with Drive scopes."
            exit 1
          }

          # Abfrage gegen 'about' ist ideal, um 403/Scopes zu erkennen:
          HTTP=$(curl -s -o /tmp/about.json -w "%{http_code}" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://www.googleapis.com/drive/v3/about?fields=user,storageQuota,kind")

          echo "HTTP=$HTTP"
          if [ "$HTTP" -ne 200 ]; then
            echo "::group::Drive 'about' response"
            cat /tmp/about.json || true
            echo "::endgroup::"
            echo "::error::Google Drive API not accessible (HTTP $HTTP). Check API enablement and scopes."
            exit 1
          fi

          echo "::group::Drive 'about' summary"
          cat /tmp/about.json | jq
          echo "::endgroup::"

          # Token für nachfolgende Steps bereitstellen
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: 📤 Upload Snapshot to Google Drive (no fallback)
        run: |
          export ACCESS_TOKEN="${ACCESS_TOKEN}"
          export SNAPSHOT="${SNAPSHOT}"

          if [ -z "$GDRIVE_FOLDER_ID" ]; then
            echo "::error::GDRIVE_FOLDER_ID is not set. Provide a Shared Drive folder ID where the service account has access."
            exit 1
          fi

          echo "Uploading '$SNAPSHOT' to folder '$GDRIVE_FOLDER_ID'..."
          META=$(jq -n --arg name "$SNAPSHOT" --arg pid "$GDRIVE_FOLDER_ID" \
                   '{name:$name, parents:[$pid], mimeType:"text/markdown"}')

          RESP=$(curl -s -X POST \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -F "metadata=$META;type=application/json;charset=UTF-8" \
            -F "file=@$SNAPSHOT;type=text/markdown" \
            "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&supportsAllDrives=true")

          echo "::group::Upload response"
          echo "$RESP" | jq .
          echo "::endgroup::"

          FILE_ID=$(echo "$RESP" | jq -r '.id // empty')
          if [ -z "$FILE_ID" ]; then
            echo "::error::Upload failed. If you see 'storageQuotaExceeded', move to a Shared Drive or enable domain-wide delegation + impersonation."
            exit 1
          fi

          echo "✅ Upload successful. File ID: $FILE_ID"

      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -f /tmp/sa.json /tmp/about.json || true

name: Upload Snapshot to Google Drive (Validated)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  snapshot:
    runs-on: ubuntu-latest
    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4

      - name: üß± Create FULL Markdown Snapshot
        run: |
          SNAPSHOT="recipe-vault_FULLCODE_$(date +'%Y-%m-%d_%H-%M-%S').md"
          echo "# üì¶ Recipe Vault ‚Äì Full Source Snapshot" > "$SNAPSHOT"
          echo "" >> "$SNAPSHOT"
          echo "**Timestamp:** $(date)" >> "$SNAPSHOT"
          echo "**Repository:** $GITHUB_REPOSITORY" >> "$SNAPSHOT"
          echo "" >> "$SNAPSHOT"
          echo "## üìÅ Repository Structure" >> "$SNAPSHOT"
          tree -a -I ".git|node_modules" >> "$SNAPSHOT" || echo "(tree unavailable)" >> "$SNAPSHOT"
          echo "" >> "$SNAPSHOT"
          echo "## üß© Complete File Contents" >> "$SNAPSHOT"
          echo "" >> "$SNAPSHOT"

          while IFS= read -r -d '' file; do
            [ "$file" = "./$SNAPSHOT" ] && continue
            echo -e "\n\n### File: \`$file\`\n\`\`\`\n" >> "$SNAPSHOT"
            cat "$file" >> "$SNAPSHOT"
            echo -e "\n\`\`\`" >> "$SNAPSHOT"
          done < <(find . -type f -not -path "./.git/*" -not -path "./node_modules/*" -print0)

          echo "SNAPSHOT=$SNAPSHOT" >> $GITHUB_ENV

      - name: üîê Verify Google Drive Access Scopes
        run: |
          echo "üîë Authenticating via Service Account..."
          echo "$GDRIVE_JSON" > /tmp/sa.json
          gcloud auth activate-service-account --key-file=/tmp/sa.json
          ACCESS_TOKEN=$(gcloud auth print-access-token)

          echo "üîç Checking scopes..."
          TOKEN_INFO=$(curl -s "https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=$ACCESS_TOKEN")
          echo "$TOKEN_INFO" | jq .

          if ! echo "$TOKEN_INFO" | grep -q "https://www.googleapis.com/auth/drive.file"; then
            echo "‚ùå Required scope 'drive.file' not granted!"
            exit 1
          fi

          echo "‚úÖ Scope validation passed."

      - name: üßæ Check Google Drive folder access
        run: |
          echo "üìÅ Checking write access to folder ID: $FOLDER_ID"
          RESPONSE=$(curl -s -X GET \
            -H "Authorization: Bearer $(gcloud auth print-access-token)" \
            "https://www.googleapis.com/drive/v3/files/$FOLDER_ID?fields=id,name,permissions,capabilities")

          if echo "$RESPONSE" | grep -q '"error"'; then
            echo "‚ùå Could not access folder. Check if FOLDER_ID is correct and shared with your Service Account."
            echo "$RESPONSE"
            exit 1
          fi

          if ! echo "$RESPONSE" | grep -q '"canAddChildren": true'; then
            echo "‚ùå The Service Account does NOT have write permissions on this folder."
            echo "üëâ Make sure it's set as 'Editor' in Google Drive sharing settings."
            exit 1
          fi

          echo "‚úÖ Folder access verified."

      - name: üì§ Upload Snapshot to Google Drive
        run: |
          echo "üì§ Uploading $SNAPSHOT to Google Drive folder..."
          UPLOAD_RESULT=$(curl -s -X POST \
            -H "Authorization: Bearer $(gcloud auth print-access-token)" \
            -F "metadata={name : '$SNAPSHOT', parents : ['$FOLDER_ID']};type=application/json;charset=UTF-8" \
            -F "file=@$SNAPSHOT;type=text/markdown" \
            "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart")

          echo "$UPLOAD_RESULT" | jq .

          FILE_ID=$(echo "$UPLOAD_RESULT" | jq -r '.id')
          if [ "$FILE_ID" = "null" ] || [ -z "$FILE_ID" ]; then
            echo "‚ùå Upload failed. Check folder access and storage quotas."
            exit 1
          fi

          echo "‚úÖ Upload successful! File ID: $FILE_ID"
          echo "üîó File Link: https://drive.google.com/file/d/$FILE_ID/view"

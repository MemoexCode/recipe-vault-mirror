name: Upload Markdown Snapshot to Google Drive (Robust Non-Interactive)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  snapshot:
    runs-on: ubuntu-latest

    steps:
      # 1) Repo auschecken
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2) Markdown-Snapshot erzeugen (kompletter Code)
      - name: Create Markdown Snapshot
        run: |
          SNAPSHOT="recipe-vault_FULLCODE_$(date +'%Y-%m-%d_%H-%M-%S').md"
          echo "# üì¶ Recipe Vault ‚Äì Full Source Snapshot" > "$SNAPSHOT"
          echo "" >> "$SNAPSHOT"
          echo "**Timestamp:** $(date)" >> "$SNAPSHOT"
          echo "**Repository:** $GITHUB_REPOSITORY" >> "$SNAPSHOT"
          echo "" >> "$SNAPSHOT"

          echo "## üìÅ Repository Structure" >> "$SNAPSHOT"
          tree -a -I ".git|node_modules" >> "$SNAPSHOT" || echo "(tree not available)" >> "$SNAPSHOT"
          echo "" >> "$SNAPSHOT"

          echo "## üß© Complete File Contents" >> "$SNAPSHOT"
          echo "" >> "$SNAPSHOT"

          while IFS= read -r -d '' file; do
            [ "$file" = "./$SNAPSHOT" ] && continue
            echo -e "\n\n### File: \`$file\`\n\`\`\`\n" >> "$SNAPSHOT"
            cat "$file" >> "$SNAPSHOT"
            echo -e "\n\`\`\`" >> "$SNAPSHOT"
          done < <(find . -type f -not -path "./.git/*" -not -path "./node_modules/*" -print0)

          echo "SNAPSHOT=$SNAPSHOT" >> $GITHUB_ENV

      # 3) Upload zu Google Drive ‚Äì Non-Interactive JWT + Scope-Check
      - name: Upload Snapshot to Google Drive
        env:
          SA_JSON: ${{ secrets.GDRIVE_SERVICE_KEY }}          # kompletter JSON-Inhalt des Service-Accounts
          FOLDER_ID: ${{ secrets.GDRIVE_BASE44_FOLDER_ID }}   # Ordner-ID von 'Base44'
        run: |
          set -euo pipefail

          echo "üì¶ Installing dependencies (jq, curl, openssl)‚Ä¶"
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq curl openssl >/dev/null

          # --- Service-Account JSON auf Disk schreiben ---
          echo "$SA_JSON" > sa.json

          # --- Private Key aus JSON extrahieren und als PEM-Datei speichern ---
          jq -r '.private_key' sa.json > key.pem

          # Safety: Pr√ºfen, ob Key plausibel ist
          if ! grep -q "BEGIN PRIVATE KEY" key.pem; then
            echo "‚ùå Private key missing or invalid in GDRIVE_SERVICE_KEY"
            exit 1
          fi

          # --- base64url Helper (ohne Padding, +/ -> -_ ) ---
          b64url() {
            openssl base64 -A | tr '+/' '-_' | tr -d '='
          }

          # --- JWT Header & Payload (Scopes: drive.file + drive) ---
          HEADER='{"alg":"RS256","typ":"JWT"}'
          ISS=$(jq -r '.client_email' sa.json)
          NOW=$(date +%s)
          EXP=$((NOW + 3600))
          PAYLOAD=$(jq -n --arg iss "$ISS" --arg aud "https://oauth2.googleapis.com/token" --arg scope "https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive" --argjson iat "$NOW" --argjson exp "$EXP" \
            '{iss:$iss, scope:$scope, aud:$aud, iat:$iat, exp:$exp}')

          # --- Header.Payload ---
          HP="$(printf '%s' "$HEADER" | b64url).$(printf '%s' "$PAYLOAD" | b64url)"

          # --- Signieren (RS256) ---
          SIG=$(printf '%s' "$HP" | openssl dgst -sha256 -sign key.pem | b64url)

          ASSERTION="${HP}.${SIG}"

          echo "üîê Requesting access token (non-interactive JWT)‚Ä¶"
          TOKEN_RESP=$(curl -s -X POST "https://oauth2.googleapis.com/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer" \
            --data-urlencode "assertion=${ASSERTION}")

          ACCESS_TOKEN=$(echo "$TOKEN_RESP" | jq -r '.access_token // empty')

          if [ -z "${ACCESS_TOKEN:-}" ]; then
            echo "‚ùå Failed to obtain access token"
            echo "üîé Token endpoint response:"
            echo "$TOKEN_RESP"
            echo ""
            echo "üß™ Checks:"
            echo "- Ist die Google Drive API im Projekt aktiviert?"
            echo "- Stimmt die SA-E-Mail, und hat der Ordner FOLDER_ID diesen SA als Bearbeiter?"
            echo "- Ist der private_key im Secret vollst√§ndig (inkl. \\n) und nicht besch√§digt?"
            exit 2
          fi

          echo "üß™ Verifiziere Scopes des Tokens‚Ä¶"
          # Achtung: /tokeninfo kann rate-limiting, ist aber f√ºr Debug hilfreich
          SCOPE_INFO=$(curl -s "https://oauth2.googleapis.com/tokeninfo?access_token=${ACCESS_TOKEN}" || true)
          echo "tokeninfo: $SCOPE_INFO"
          if ! echo "$SCOPE_INFO" | grep -q "https://www.googleapis.com/auth/drive.file"; then
            echo "‚ö†Ô∏è Warnung: 'drive.file' nicht im Token ‚Äì Upload k√∂nnte mit 403 scheitern."
          fi

          if ! echo "$SCOPE_INFO" | grep -q "https://www.googleapis.com/auth/drive"; then
            echo "‚ö†Ô∏è Warnung: 'drive' nicht im Token ‚Äì Abfragen von Links/Metadaten k√∂nnten scheitern."
          fi

          echo "üì§ Uploading file '${SNAPSHOT}' to folder ${FOLDER_ID}‚Ä¶"
          UPLOAD_RESULT=$(curl -s -X POST \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -F "metadata={name : '${SNAPSHOT}', parents : ['${FOLDER_ID}']};type=application/json;charset=UTF-8" \
            -F "file=@${SNAPSHOT};type=text/markdown" \
            "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart")

          FILE_ID=$(echo "$UPLOAD_RESULT" | jq -r '.id // empty')
          if [ -z "$FILE_ID" ]; then
            echo "‚ùå Upload failed. Raw response:"
            echo "$UPLOAD_RESULT"
            # H√§ufige Fehler antizipiert:
            echo ""
            echo "üß© M√∂gliche Ursachen:"
            echo "1) 403 insufficientPermissions ‚Üí Ordner nicht f√ºr SA freigegeben ODER Scopes fehlen."
            echo "   - Ordner in Drive: Rechtsklick ‚Üí Freigeben ‚Üí Service-Account-E-Mail als Bearbeiter hinzuf√ºgen."
            echo "   - Drive API in Cloud Console aktivieren."
            echo "2) 404 notFound ‚Üí FOLDER_ID falsch (nur die ID nach /folders/ in der URL)."
            echo "3) 400 invalidArgument ‚Üí multipart-Form nicht korrekt; in diesem Script ist sie korrekt ‚Äì pr√ºfe Dateiname / Sonderzeichen."
            exit 3
          fi

          echo "‚úÖ Upload successful! File ID: $FILE_ID"

          echo "üåê Fetching webViewLink‚Ä¶"
          FILE_INFO=$(curl -s -X GET \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            "https://www.googleapis.com/drive/v3/files/${FILE_ID}?fields=webViewLink,name")

          WEBLINK=$(echo "$FILE_INFO" | jq -r '.webViewLink // empty')
          echo "üîó Web View Link: ${WEBLINK:-'(no link returned)'}"
